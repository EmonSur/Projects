let canvas, context;
let playerX, playerY, playerMove, playerSpeed, playerIndex;
let bulletX, bulletY, bulletSpeed;
let enemies = [];
let bullets = [];
let wallWidth = 20;
let wallOffset = 0.15;
let collision = false;
let difficultyLevel = 'Easy';
let currentTime = 0;
let timerInterval;
let elapsedTime = 0;
let livesRemaining = 3;
let skipLivesRemainingDeduction = false;

let ignoreCollisions = false;
let timeFreeze = false;
let unlimitedLives = false;
let shootingMode = false;
let newBullet = false;
let win = false;
let lose = false;

let easyBestTime = 0;
let mediumBestTime = 0;
let hardBestTime = 0;

let backgroundImage = new Image();
let bulletImage = new Image();
let enemyImage = new Image();
let spriteImage = new Image();

let backgroundTilesPerRow = 32;
let backgroundTilesSize = 16;
let layer1TilesPerRow = 32;
let layer1TilesSize = 16;
let layer2TilesPerRow = 32;
let layer2TilesSize = 16;

let background = [
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 229, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 231,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 261, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 263,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  45,  47,  43,  46,  46,  44,  43,  43,  46,  43,  45,  45,  44,  43,  47,  47,  46,  44,  45,  43,  47,  43,  45,  46,  47,  43,  46,  44,  45,  45,  47,  43,  46,  44,  44,  45,  47,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  46,  43,  46,  47,  45,  46,  44,  43,  44,  43,  46,  47,  46,  45,  46,  47,  46,  46,  44,  46,  47,  46,  44,  45,  45,  44,  43,  43,  44,  47,  46,  43,  43,  45,  46,  47,  45,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  44,  44,  44,  47,  45,  45,  47,  47,  44,  47,  47,  45,  47,  47,  46,  47,  47,  46,  45,  47,  44,  47,  44,  46,  47,  45,  44,  46,  43,  43,  47,  46,  44,  44,  43,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  46,  47,  44,  43,  43,  47,  45,  46,  44,  43,  46,  44,  44,  44,  47,  43,  47,  47,  44,  45,  45,  47,  45,  47,  44,  43,  43,  46,  44,  44,  47,  46,  46,  43,  46,  45,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  43,  47,  46,  46,  43,  46,  47,  45,  45,  45,  45,  47,  44,  44,  43,  46,  45,  47,  44,  43,  44,  45,  47,  44,  47,  47,  45,  47,  43,  47,  44,  47,  43,  45,  45,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  46,  43,  45,  44,  43,  43,  44,  47,  46,  46,  47,  47,  47,  46,  46,  44,  46,  43,  47,  45,  43,  46,  46,  46,  46,  46,  45,  47,  44,  44,  47,  46,  45,  45,  43,  45,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  47,  46,  47,  47,  46,  43,  43,  43,  45,  47,  43,  43,  44,  46,  44,  46,  45,  43,  47,  43,  45,  43,  47,  47,  45,  45,  44,  46,  44,  45,  46,  45,  47,  43,  47,  44,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  44,  44,  43,  45,  43,  44,  47,  44,  46,  46,  47,  45,  45,  43,  46,  45,  46,  46,  43,  46,  46,  44,  46,  45,  45,  44,  47,  45,  45,  43,  46,  47,  46,  47,  45,  44,  45,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  46,  43,  44,  47,  46,  43,  46,  45,  43,  45,  47,  44,  45,  43,  45,  43,  43,  43,  45,  46,  46,  45,  46,  45,  43,  45,  44,  46,  47,  46,  44,  45,  45,  47,  44,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  47,  46,  47,  44,  46,  43,  47,  43,  45,  47,  47,  44,  47,  43,  45,  47,  47,  47,  44,  46,  45,  43,  44,  47,  46,  47,  45,  43,  47,  44,  45,  45,  46,  44,  43,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  46,  47,  46,  44,  44,  43,  47,  44,  44,  46,  45,  47,  45,  45,  44,  47,  43,  43,  43,  46,  46,  44,  44,  44,  44,  44,  43,  43,  46,  47,  47,  43,  46,  46,  44,  46,  46,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  46,  44,  45,  47,  45,  43,  46,  47,  47,  46,  47,  46,  44,  47,  43,  47,  44,  43,  45,  46,  46,  43,  45,  44,  43,  47,  45,  43,  43,  47,  47,  45,  47,  44,  43,  47,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  47,  44,  47,  47,  46,  45,  43,  47,  45,  46,  44,  44,  46,  47,  44,  46,  45,  47,  43,  46,  47,  45,  45,  44,  44,  46,  44,  46,  43,  45,  45,  44,  43,  46,  46,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  45,  44,  47,  46,  47,  47,  44,  44,  47,  45,  45,  46,  46,  46,  46,  43,  43,  45,  45,  45,  45,  47,  45,  43,  45,  47,  43,  44,  46,  46,  47,  44,  44,  43,  43,  47,  45,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  46,  46,  44,  46,  44,  44,  46,  45,  43,  46,  46,  46,  46,  45,  44,  46,  45,  45,  45,  46,  43,  47,  43,  47,  45,  44,  44,  44,  44,  43,  46,  43,  47,  43,  43,  44,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  47,  43,  47,  43,  46,  47,  43,  45,  45,  47,  43,  43,  47,  46,  44,  44,  46,  45,  43,  45,  44,  45,  46,  43,  43,  43,  47,  47,  46,  44,  46,  44,  44,  47,  47,  47,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  46,  47,  47,  44,  44,  45,  47,  45,  45,  47,  44,  47,  45,  44,  47,  45,  46,  43,  45,  43,  43,  44,  44,  43,  46,  45,  43,  44,  43,  45,  44,  47,  43,  44,  47,  45,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  43,  44,  46,  47,  45,  45,  47,  47,  46,  45,  45,  47,  43,  43,  44,  47,  44,  44,  44,  43,  44,  47,  44,  43,  43,  44,  43,  45,  46,  47,  47,  43,  45,  44,  44,  44,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  45,  43,  43,  44,  46,  45,  44,  47,  44,  45,  47,  44,  45,  46,  43,  44,  47,  45,  45,  43,  46,  45,  45,  44,  43,  43,  47,  45,  45,  46,  43,  47,  45,  46,  45,  43,  45,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  44,  47,  44,  44,  46,  44,  45,  46,  43,  43,  44,  45,  43,  43,  45,  45,  46,  43,  44,  47,  44,  47,  45,  47,  43,  46,  44,  45,  44,  45,  43,  46,  46,  45,  45,  46,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  46,  46,  46,  46,  47,  45,  43,  45,  43,  44,  46,  44,  46,  46,  45,  47,  43,  47,  46,  43,  44,  47,  46,  47,  44,  47,  45,  45,  44,  43,  45,  46,  46,  46,  45,  43,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  44,  46,  43,  47,  47,  46,  45,  44,  44,  44,  45,  46,  45,  45,  43,  47,  44,  46,  47,  47,  43,  47,  43,  44,  43,  44,  44,  44,  46,  44,  45,  47,  46,  43,  44,  45,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  47,  44,  46,  45,  45,  45,  43,  47,  45,  46,  45,  43,  46,  47,  44,  43,  45,  43,  46,  44,  47,  45,  45,  46,  47,  43,  43,  45,  46,  46,  43,  44,  43,  44,  43,  45,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  44,  46,  44,  43,  44,  47,  47,  45,  46,  46,  44,  43,  47,  45,  43,  46,  46,  45,  46,  45,  46,  45,  46,  43,  43,  43,  44,  45,  46,  46,  45,  47,  43,  44,  47,  45,  47,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  46,  47,  44,  44,  45,  45,  47,  46,  44,  43,  44,  44,  47,  43,  46,  44,  45,  46,  43,  45,  44,  44,  44,  47,  45,  44,  43,  44,  43,  44,  47,  45,  47,  44,  45,  44,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  43,  47,  43,  43,  43,  43,  44,  43,  45,  45,  45,  47,  44,  44,  46,  45,  43,  44,  47,  45,  43,  46,  43,  45,  43,  44,  47,  43,  46,  43,  47,  45,  46,  47,  44,  44,  44,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  46,  44,  45,  47,  44,  45,  47,  43,  44,  43,  44,  43,  43,  47,  46,  46,  45,  44,  44,  45,  43,  46,  43,  46,  43,  43,  43,  43,  44,  45,  43,  43,  46,  44,  44,  43,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  46,  43,  43,  44,  45,  43,  46,  43,  44,  45,  44,  47,  43,  45,  45,  43,  47,  45,  44,  45,  46,  44,  47,  44,  43,  45,  47,  47,  45,  47,  46,  44,  47,  47,  44,  44,  44,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  45,  46,  46,  47,  43,  47,  46,  46,  46,  43,  44,  47,  43,  43,  46,  46,  43,  44,  46,  46,  46,  46,  43,  47,  44,  44,  47,  47,  46,  46,  47,  47,  45,  43,  46,  43,  45,  44,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1]
] 

let layer1 = [
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  85, 406, 407,  85,  -1,  -1,  -1,  -1,  29,  81,  29,  -1, 865, 336, 337, 338, 865,  -1,  29,  81,  29,  -1,  -1,  -1,  -1,  85, 406, 407,  85,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1, 148,  -1, 117, 438, 439,  117, -1,  -1,  -1,  -1,  61, 113,  61,  -1,  -1, 368, 369, 370,  -1,  -1,  61, 113,  61,  -1,  -1,  -1,  -1, 117, 438, 439, 117,  -1, 148, 412, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1, 284, 285,  -1, 149,   -1,  -1, 149, -1, 278, 279,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1, 278, 279,  -1, 149,  -1,  -1, 149,  -1,  -1, 444, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 409, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1, 628, 629, 629, 630,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 414, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1, 660, 661, 661, 662,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1, 660, 661, 661, 661, 661, 661, 661, 662,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1, 660, 661, 661, 661, 661, 661, 661, 662,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],  
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1, 692, 693, 661, 661, 661, 661, 693, 694,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1, 660, 661, 661, 661,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  85,  -1,  -1,  -1,  -1,  -1, 692, 693, 693, 694,  -1,  -1,  -1,  -1, 274,  85, 976, 977, 977, 977, 978,  85, 274,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 306, 117, 976, 977, 977, 977, 978, 117, 306,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 117, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149, 976, 977, 977, 977, 978, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 977, 977, 977, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],  
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 145, 977, 145, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 145, 977, 145, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 977, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 977, 977, 977, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 945, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1, 346, 346,  -1,  -1,  -1,  -1, 346, 346,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1, 624, 625, 625, 625, 625, 625, 626,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1, 344, 349, 350, 345,  -1,  -1, 344, 349, 350, 345,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1, 656, 657, 528, 529, 530, 657, 658,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1, 344, 349, 350, 345,  -1,  -1, 344, 349, 350, 345,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1, 656, 657, 560, 561, 562, 657, 658,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1, 347, 347,  -1,  -1,  -1,  -1, 347, 347,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1, 656, 657, 592, 593, 594, 657, 658,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1, 688, 689, 689, 689, 689, 689, 690,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1],  
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 293,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 295,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 325, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 976, 977, 977, 977, 978, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 327,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 323, 976, 977, 977, 977, 978, 321, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322, 322,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 976, 977, 977, 977, 978,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, -1]
]

let layer2 = [
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 512,  -1,  -1, 512,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 544,  -1,  -1, 544,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 269,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 512, 145,  -1,  -1,  -1,  -1, 145, 512,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 544,  -1,  -1, 709, 710,  -1,  -1, 544,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 512,  -1,  -1, 709, 710,  -1,  -1, 512,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 544,  -1,  -1,  -1,  -1,  -1,  -1, 544,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 145, 512,  -1,  -1, 512, 145,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 544,  -1,  -1, 544,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 269,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 274,  85,  -1,  -1,  -1,  -1,  -1,  85, 274,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 306, 117,  -1,  -1,  -1,  -1,  -1, 117, 306,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 149,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 519,  -1,  89,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1],
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  121,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 519,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 269,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1], 
	[  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1]
]


// This function initializes the canvas and variables
function init() {
	canvas = document.getElementById('canvas');
	context = canvas.getContext('2d');


	// Set player position to the center of the screen
	playerX = canvas.width / 2 - 10;
	playerY = canvas.height - 50;
	playerIndex = 0;
    playerSpeed = 8;

	bulletX = playerX + 12;
	bulletY = playerY;
	bulletSpeed = 15;


    // Start the timer
	currentTime = 0;
	timerInterval = setInterval(updateTime, 1000);


	window.addEventListener('keydown', handleKeyPress);

	load_assets( [
        {"var": backgroundImage, "url": "background.png"},
		{"var": bulletImage, "url": "bullet.png"},
		{"var": enemyImage, "url": "bat.png"},
		{"var": spriteImage, "url": "sprite.png"}
    ], draw);


	canvas.addEventListener('click', function(event) {
		if (win && nextLevelButton) {
			// Get the canvas position on the page
			let canvasBounds = canvas.getBoundingClientRect();
			let scaleX = canvas.width / canvasBounds.width;  // Scale factor for X
			let scaleY = canvas.height / canvasBounds.height; // Scale factor for Y
	
			// Adjust the mouse coordinates according to the canvas size and position
			let mouseX = (event.clientX - canvasBounds.left) * scaleX;
			let mouseY = (event.clientY - canvasBounds.top) * scaleY;
	
			// Check if the mouse is inside the button area
			if (
				mouseX >= nextLevelButton.x &&
				mouseX <= nextLevelButton.x + nextLevelButton.width &&
				mouseY >= nextLevelButton.y &&
				mouseY <= nextLevelButton.y + nextLevelButton.height
			) {
				// Perform action for next level
				window.location.href = "level2.html"; // Redirect to next level
			}
		}
	});
	
}




// Add enemies to the enemies object for the given difficulty level
function addEnemies(difficultyLevel) {
    enemies[difficultyLevel] = enemies[difficultyLevel] || [];
	if (difficultyLevel === 'Easy') {
		enemies[difficultyLevel].push( enemy1 = {            
            x: canvas.width * wallOffset + wallWidth + 10,
            y: 150, speed: 12, direction: 1, index: 0});
		enemies[difficultyLevel].push( enemy2 = {
            x: canvas.width / 2,
            y: 350, speed: 14, direction: -1, index: 1});
        enemies[difficultyLevel].push( enemy3 = {
            x: canvas.width * (1 - wallOffset) - wallWidth - 25,
            y: 550, speed: 13, direction: 1, index: 2});
	} else if (difficultyLevel === 'Medium') {
		enemies[difficultyLevel].push( enemy1 = {
            x: canvas.width * wallOffset + wallWidth + 10,
            y: 150, speed: 14, direction: 1, index: 0});
		enemies[difficultyLevel].push( enemy2 = {
            x: canvas.width / 2,
            y: 350, speed: 16, direction: -1, index: 1});
		enemies[difficultyLevel].push( enemy3 = {
            x: canvas.width * (1 - wallOffset) - wallWidth - 25,
            y: 550, speed: 15, direction: 1, index: 2});
	} else if (difficultyLevel === 'Hard') {
		enemies[difficultyLevel].push( enemy1 = {
            x: canvas.width * wallOffset + wallWidth + 10,
            y: 150, speed: 16, direction: 1, index: 0});
		enemies[difficultyLevel].push( enemy2 = {
            x: canvas.width / 2,
            y: 350, speed: 18, direction: -1, index: 1});
		enemies[difficultyLevel].push(enemy3 = {        
            x: canvas.width * (1 - wallOffset) - wallWidth - 25,
            y: 550, speed: 17, direction: 1, index: 2});
	};
}

function addBullets() {
	if (newBullet) {
		newBullet = false;
		bullets.push( {x : bulletX, y : bulletY});
	}
}

// This function is called every frame and updates the game state
function update() {
	if (!timeFreeze) {
		// Update enemy positions
		for (let enemy of enemies[difficultyLevel]) {
			enemy.x += enemy.speed * enemy.direction;
		};

		// Reverse enemy direction if they hit a wall
		for (let enemy of enemies[difficultyLevel]) {
			if (enemy.x <= canvas.width * wallOffset + wallWidth || enemy.x + 20 >= canvas.width * (1 - wallOffset) - wallWidth) {
				enemy.direction *= -1;
			}
    	};
	}

	// Move bullet up if the space-bar is pressed
	if (shootingMode) {
		for (let bullet of bullets) {
			bullet.y -= bulletSpeed;
		};
	}


	// Move player up if up arrow key is pressed
    if (playerMove) {
        playerY -= playerSpeed;
		if (playerY <= 80) {
            playerMove = false;
        }
}
}



function updateTime() {
    currentTime++;
    let minutes = Math.floor(currentTime / 60);
    let seconds = currentTime % 60;
    let timeString = padNumber(minutes, 2) + ":" + padNumber(seconds, 2);
    document.getElementById("timer").textContent = timeString;
    // Increment the elapsed time
    elapsedTime++;
}

function padNumber(number, digits) {
    return String(number).padStart(digits, "0");
}  

function displayLifeLostMessage() {
	if (!unlimitedLives) {
		let messageElement = document.getElementById("message-display");
		messageElement.textContent = "You lost a life!";
		messageElement.style.color = "#000080";
		messageElement.style.display = "block";
		messageElement.style.marginTop = "115px";
		messageElement.style.marginLeft = "8px";
	
		// Set a delay before hiding the message again
		setTimeout(function() {
			messageElement.style.display = "none";
		}, 3000); // Wait for 3 seconds before hiding the message
	}
}
  
  
function player_collides(enemy) {
    if (playerX + 20 < enemy.x ||
        enemy.x + 35 < playerX ||
        playerY > enemy.y + 20 ||
        enemy.y > playerY + 20) {
        collision = false;
		return false;
    } else if (!ignoreCollisions) {
		collision = true;
		return true;
	}
}

// Define a function to detect collisions between bullets and enemies
function detectCollisions() {
	// Loop through all the bullets
	for (let i = 0; i < bullets.length; i++) {
		let bullet = bullets[i];

		if (bullet.y <= 75) {
			bullets.splice(i, 1);
		}

		// Loop through all the enemies
		for (let enemy of enemies[difficultyLevel])  {
			let levelEnemies = enemies[difficultyLevel];
			let index = levelEnemies.indexOf(enemy);
		

			// Check if the bullet and enemy collide
			if (
				bullet.x < enemy.x + 35 &&
				bullet.x + 15 > enemy.x &&
				bullet.y < enemy.y + 20 &&
				bullet.y + 15 > enemy.y
			) {
				// If a collision occurs, remove the bullet and enemy from the canvas
				bullets.splice(i, 1);
				if (index > -1) {
					levelEnemies.splice(index, 1)
				}
				
				// Decrement i to account for the removed elements
				i--;
			}
		}
	}
}


// This function is called every frame and redraws the canvas
function draw() {

	// Clear the canvas
	context.clearRect(0, 0, canvas.width, canvas.height);
	
	context.fillStyle = "black";
	context.fillRect(0, 0, canvas.width, canvas.height);


	// Draw the background
	for (let r = 0; r < 34; r += 1) {
		for (let c = 0; c < 54; c += 1) {
			let tile = background[r][c];
			if (tile >= 0) {
				let tileRow = Math.floor(tile / backgroundTilesPerRow);
				let tileCol = Math.floor(tile % backgroundTilesPerRow);
				context.drawImage(backgroundImage,
					tileCol * backgroundTilesSize, tileRow * backgroundTilesSize, backgroundTilesSize, backgroundTilesSize,
					c * 20, r * 20, 20, 20);
			}
		}
	}

	// Draw Layer 1
	for (let r = 0; r < 34; r += 1) {
		for (let c = 0; c < 54; c += 1) {
			let tile = layer1[r][c];
			if (tile >= 0) {
				let tileRow = Math.floor(tile / layer1TilesPerRow);
				let tileCol = Math.floor(tile % layer1TilesPerRow);
				context.drawImage(backgroundImage,
					tileCol * layer1TilesSize, tileRow * layer1TilesSize, layer1TilesSize, layer1TilesSize,
					c * 20, r * 20, 20, 20);
			}
		}
	}

		// Draw Layer 2
		for (let r = 0; r < 34; r += 1) {
			for (let c = 0; c < 54; c += 1) {
				let tile = layer2[r][c];
				if (tile >= 0) {
					let tileRow = Math.floor(tile / layer2TilesPerRow);
					let tileCol = Math.floor(tile % layer2TilesPerRow);
					context.drawImage(backgroundImage,
						tileCol * layer2TilesSize, tileRow * layer2TilesSize, layer2TilesSize, layer2TilesSize,
						c * 20, r * 20, 20, 20);
				}
			}
		}

	
	// Draw box
	context.fillStyle = "#000080";
	context.fillRect(0, 0, canvas.width, 40)


	// Draw player
	if (playerMove) {
		playerIndex = 1;
		if (playerIndex === 1) {
			context.drawImage(spriteImage,
				72, 0, 24, 32, playerX, playerY, 40, 40);
			playerIndex++;
		} else if (playerIndex === 2) {
			context.drawImage(spriteImage,
				96, 0, 24, 32, playerX, playerY, 40, 40);
			playerIndex++;
		} else if (playerIndex === 3) {
			context.drawImage(spriteImage,
				120, 0, 24, 32, playerX, playerY, 40, 40);
			playerIndex++;
		} else if (playerIndex === 4) {
			context.drawImage(spriteImage,
				96, 0, 24, 32, playerX, playerY, 40, 40);
			playerIndex = 1;
		}
	} else {
		context.drawImage(spriteImage,
			0, 0, 24, 32, playerX, playerY, 40, 40);
	}

	// Draw bullet if in shooting Mode
	for (let bullet of bullets) {
		context.drawImage(bulletImage, bullet.x, bullet.y, 15, 15)
	};
	
	// Draw enemies
    for (let enemy of enemies[difficultyLevel]) {
		if (enemy.index == 0) {
			context.drawImage( enemyImage,
				0, 0, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index++;
		} else if (enemy.index == 1) {
			context.drawImage( enemyImage,
				32, 0, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index++;
		} else if (enemy.index == 2) {
			context.drawImage( enemyImage,
				0, 32, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index++;
		} else if (enemy.index == 3) {
			context.drawImage( enemyImage,
				32, 32, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index++;
		} else if (enemy.index == 4) {
			context.drawImage( enemyImage,
				0, 64, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index++;
		} else if (enemy.index == 5) {
			context.drawImage( enemyImage,
				32, 64, 32, 32, enemy.x, enemy.y, 40, 40)
			enemy.index = 0;
		}
    };

	// Display Stats Banner
	context.font = "15px Uncial Antiqua";
	context.fillStyle = "white";
	context.fillText("Difficulty Level: " + difficultyLevel, 20, 27);

	context.font = "15px Uncial Antiqua";
	context.fillStyle = "white";
	context.fillText(livesRemaining + "/3 Lives Remaining", canvas.width - 170, 27);

	// Display Power Ups Box
	context.font = "15px Uncial Antiqua";
	context.fillStyle = "lightblue";
	context.fillText("Power Ups:", 25, 75);

	context.fillStyle = "lightblue";
	context.fillRect(10, 85, 150, 3);

	// Display Best Time Box
	if (difficultyLevel === 'Easy') {
		if (easyBestTime != 0) {
			context.font = "15px Uncial Antiqua";
			context.fillStyle = "lightblue";
			context.fillText("Best time:", canvas.width - 140, 75)

			context.fillStyle = "lightblue";
			context.fillRect(canvas.width - 150, 85, 140, 3);

			context.font = "15px Uncial Antiqua";
			context.fillStyle = "#d3d3d3";
			context.fillText(easyBestTime + ' seconds', canvas.width - 140, 115);
		}
	}

	if (difficultyLevel === 'Medium') {
		if (mediumBestTime != 0) {
			context.font = "15px Uncial Antiqua";
			context.fillStyle = "lightblue";
			context.fillText("Best time:", canvas.width - 140, 75)

			context.fillStyle = "lightblue";
			context.fillRect(canvas.width - 150, 85, 140, 3);

			context.font = "15px Uncial Antiqua";
			context.fillStyle = "#d3d3d3";
			context.fillText(mediumBestTime + ' seconds', canvas.width - 140, 115);
		}
	}

	if (difficultyLevel === 'Hard') {
		if (hardBestTime != 0) {
			context.font = "15px Uncial Antiqua";
			context.fillStyle = "lightblue";
			context.fillText("Best time:", canvas.width - 140, 75)

			context.fillStyle = "lightblue";
			context.fillRect(canvas.width - 150, 85, 140, 3);

			context.font = "15px Uncial Antiqua";
			context.fillStyle = "#d3d3d3";
			context.fillText(hardBestTime + ' seconds', canvas.width - 140, 115);
		}
	}

	if (ignoreCollisions) {
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "lightblue";
		context.fillText("Ghost Mode", 15, 115);
	} else{
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "#d3d3d3";
		context.fillText("Ghost Mode", 15, 115);
	}
	if (timeFreeze) {
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "lightblue";
		context.fillText("Time Freeze Mode", 15, 145);
	} else{
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "#d3d3d3";
		context.fillText("Time Freeze Mode", 15, 145);
	}
	if (unlimitedLives) {
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "lightblue";
		context.fillText("Immortal Mode", 15, 175);
	} else{
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "#d3d3d3";
		context.fillText("Immortal Mode", 15, 175);
	}
	if (shootingMode) {
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "lightblue";
		context.fillText("Assault Mode", 15, 205);
	} else{
		context.font = "14px Uncial Antiqua";
		context.fillStyle = "#d3d3d3";
		context.fillText("Assault Mode", 15, 205);
	}

	// Draw Lose message
    for (let enemy of enemies[difficultyLevel]) {

        if (player_collides(enemy) || elapsedTime === 120) {

			if (elapsedTime === 120) {
				skipLivesRemainingDeduction = true;
			}

			if (!unlimitedLives && livesRemaining != 0 && !skipLivesRemainingDeduction) {
				livesRemaining -= 1;
			}
			if (!ignoreCollisions) {
				if (livesRemaining === 0 || elapsedTime === 120) {
                    lose = true;
					collision = true;
					// Stop the timer
					clearInterval(timerInterval);

					// Display lose message
					context.fillStyle = "#CB4335"
					context.fillRect(0,  300, canvas.width, 180)
			
					context.font = "27px Uncial Antiqua";
					context.fillStyle = "white";
					context.fillText("You Lose!", canvas.width / 2 - 55, 355);

					// Display the time taken
					let elapsedSec = elapsedTime % 60
					if (elapsedSec.toString().length === 1) {
						elapsedSec = "0" + elapsedSec
					}
					context.font = "22px Uncial Antiqua";
					context.fillStyle = "white";
					context.fillText(`Time taken: 0${Math.floor(elapsedTime/ 60)}:${elapsedSec}`, canvas.width / 2 - 95, 395);
			

					// Display the tries taken
					context.font = "22px Uncial Antiqua";
					context.fillStyle = "white";
					context.fillText(`Lives Left: ${livesRemaining}/3`, canvas.width / 2 - 67, 435);

					// Stop updating the enemies and player
					for (let enemy of enemies[difficultyLevel]) {
						enemy.speed = 0;
					};
					playerSpeed = 0;

					if (lose) {
						return;
					}


				}  else {
					collision = false;

					// Set player position to the center of the screen
					playerX = canvas.width / 2 - 10;
					playerY = canvas.height - 50;

					playerMove = false;

					// Display life lost message
					displayLifeLostMessage();
				}
			}
        }

		
	}

	if (playerY <= 80) {
		win = true;
		// Stop the timer
		clearInterval(timerInterval);
	
		context.fillStyle = "rgba(0,0,0,0.1)";
		context.fillRect(0, 0, canvas.width, canvas.height);
	
		context.fillStyle = "#000080";
		context.fillRect(0, 270, canvas.width, 240);
	
		// Display the win message
		context.font = "22px Uncial Antiqua";
		context.fillStyle = "white";
		context.fillText("You Win!", canvas.width / 2 - 55, 325);
	
		// Display the time taken
		let elapsedSec = elapsedTime % 60;
		if (elapsedSec.toString().length === 1) {
			elapsedSec = "0" + elapsedSec;
		}
		context.font = "18px Uncial Antiqua";
		context.fillStyle = "white";
		context.fillText(`Time taken: 0${Math.floor(elapsedTime / 60)}:${elapsedSec}`, canvas.width / 2 - 95, 365);
	
		// Display the tries taken
		context.font = "18px Uncial Antiqua";
		context.fillStyle = "white";
		context.fillText(`Lives Left: ${livesRemaining}/3`, canvas.width / 2 - 67, 405);

		// Draw a visible button for the next level
		context.fillStyle = "#ffffff";
		context.fillRect(canvas.width / 2 - 130, 430, 260, 35);  // Draw a rectangle button behind the text
	
		// Display Next Level Button
		context.font = "19px Uncial Antiqua";
		context.fillStyle = "#000080";
		context.fillText("Continue to Next Level", canvas.width / 2 - 125, 455);
	
		// Stop updating the enemies and player
		for (let enemy of enemies[difficultyLevel]) {
			enemy.speed = 0;
		}
		playerSpeed = 0;
	
		// Store the button position for click detection
		nextLevelButton = {
			x: canvas.width / 2 - 125,
			y: 430,
			width: 250,
			height: 50,
		};
	
		if (difficultyLevel === 'Easy') {
			if (easyBestTime > elapsedTime || easyBestTime === 0) {
				easyBestTime = elapsedTime;
			}
		} else if (difficultyLevel === 'Medium') {
			if (mediumBestTime > elapsedTime || mediumBestTime === 0) {
				mediumBestTime = elapsedTime;
			}
		} else if (difficultyLevel === 'Hard') {
			if (hardBestTime > elapsedTime || hardBestTime === 0) {
				hardBestTime = elapsedTime;
			}
		}
	
		if (win) {
			return;
		}
	}	
}


// Call init function to start the game
init();


// Handle different key press events in the same function
function handleKeyPress(event) {
        if (event.code === "ArrowUp" && !playerMove) {
            playerMove = true;
        }
		// Check if the 'i' key was pressed
		if (event.code === 'KeyG') {
			ignoreCollisions = !ignoreCollisions;
		}// Toggle the ignoreCollisions variable
	
		// Check if the 'f' key was pressed
		if (event.code === "KeyF") {
			timeFreeze = !timeFreeze;
		}
		// Check if the 's' key was pressed
		if (event.code === "KeyA") {
			shootingMode = !shootingMode;
		}
		// Check if the space-bar was pressed
		if (event.code === "Space") {
			if (shootingMode) {
				newBullet = true;
			}
		}
		// Check if the 's' key was pressed
		if (event.code === "KeyI") {
			unlimitedLives = !unlimitedLives;
		}
}

// This is the main game loop that is called every frame
function gameLoop() {

		update();
		draw();

	if (!lose && !win) {
		requestAnimationFrame(gameLoop);
	}

	addBullets();
	detectCollisions();
}

// Start the main game loop
addEnemies(difficultyLevel);
requestAnimationFrame(gameLoop);


// Listen for user input to change the difficulty level
document.getElementById('easy-button').addEventListener('click', () => {;
	if (difficultyLevel === "Easy" && !lose && !win) {
		return; // Return early if the current difficulty is already "Easy" AND the player has not won AND not lost
	}
    difficultyLevel = 'Easy';
	resetGame();
	init();
});

document.getElementById('medium-button').addEventListener('click', () => {
	if (difficultyLevel === "Medium" && !lose && !win) {
		return; // Return early if the current difficulty is already "Medium" AND the player has not won AND not lost
	}
    difficultyLevel = 'Medium';
	resetGame();
	init();
});

document.getElementById('hard-button').addEventListener('click', () => {
	if (difficultyLevel === "Hard" && !lose && !win) {
		return; // Return early if the current difficulty is already "Hard" AND the player has not won AND not lost
	}
    difficultyLevel = 'Hard';
	resetGame();
	init();
});


function resetGame() {
    // Reset the variables
    elapsedTime = 0;
    currentTime = 0;
	clearInterval(timerInterval);

    playerMove = false;
	collision = false;
	livesRemaining = 3;
	skipLivesRemainingDeduction = false;

	unlimitedLives = false;
	ignoreCollisions = false;
	timeFreeze = false;
	newBullet = false;
	shootingMode = false;

	enemies = [];
	enemies[difficultyLevel] = [];
	addEnemies(difficultyLevel);

	if (win || lose) {
		win = false;
		lose = false;
		requestAnimationFrame(gameLoop);
	};
}



  
function load_assets(assets, callback) {
    let num_assets = assets.length;
    let loaded = function() {
        console.log("loaded");
        num_assets = num_assets - 1;
        if (num_assets === 0) {
            callback()
        }
    };
    for (let asset of assets) {
        let element = asset.var;
        if ( element instanceof HTMLImageElement ) {
            console.log("img")
            element.addEventListener("load", loaded, false);
        } else if (element instanceof HTMLAudioElement ) {
            console.log("audio");
            element.addEventListener("canplaythrough", loaded, false);
        }
        element.src = asset.url;
    }
}